generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model images {
  id_image  Int      @id @default(autoincrement())
  format    String
  version   String
  createdAt DateTime @default(now())
  id_user   Int?
  id_league Int?
  id_team   Int?
  league    leagues? @relation("LeagueImages", fields: [id_league], references: [id_league])
  team      teams?   @relation("TeamImages", fields: [id_team], references: [id_team])
  user      users?   @relation("UserImages", fields: [id_user], references: [id_user])

  @@index([id_user])
  @@index([id_league])
  @@index([id_team])
}

model default_images {
  id_default_image Int      @id @default(autoincrement())
  format           String
  version          String
  createdAt        DateTime @default(now())
}

model users {
  id_user        Int              @id @default(autoincrement())
  name           String?
  email          String           @unique
  username       String
  surname        String?
  description    String?
  password       String
  images         images[]         @relation("UserImages")

  league_players league_players[]
}

model leagues {
  id_league      Int              @id @default(autoincrement())
  name           String
  description    String?
  type           String?
  maxteams       Int              @default(16)
  images         images[]         @relation("LeagueImages")
  league_players league_players[]
  score          score[]
  sports_custom  sports_custom[]
  sports_league  sports_league[]
  teams          teams[]
}

model league_players {
  id_participation_league Int            @id @default(autoincrement())
  id_player               Int
  id_league               Int
  leagues                 leagues        @relation(fields: [id_league], references: [id_league])
  users                   users          @relation(fields: [id_player], references: [id_user])
  players_team            players_team[]
}

model teams {
  id_team          Int            @id @default(autoincrement())
  name             String
  description      String?
  id_league        Int
  images           images[]       @relation("TeamImages")
  matchesAsTeamOne matches[]      @relation("TeamOneRelation")
  matchesAsTeamTwo matches[]      @relation("TeamTwoRelation")
  players_team     players_team[]
  score            score[]
  leagues          leagues        @relation(fields: [id_league], references: [id_league])
}

model players_team {
  id_player_team Int            @id @default(autoincrement())
  id_team        Int
  id_player      Int
  league_players league_players @relation(fields: [id_player], references: [id_participation_league])
  teams          teams          @relation(fields: [id_team], references: [id_team])
}

model matches {
  id_match    Int      @id @default(autoincrement())
  id_team_one Int
  id_team_two Int
  match_date  DateTime
  sport       String
  winner      Int?
  loser       Int?
  draw        Boolean  @default(false)
  teamOne     teams    @relation("TeamOneRelation", fields: [id_team_one], references: [id_team])
  teamTwo     teams    @relation("TeamTwoRelation", fields: [id_team_two], references: [id_team])

  @@index([id_team_one], map: "idx_team_one")
  @@index([id_team_two], map: "idx_team_two")
}

model score {
  id_score  Int     @id @default(autoincrement())
  type      String
  id_league Int
  id_team   Int
  matches   Int?
  wins      Int?
  loses     Int?
  points    Int?
  draws     Int?
  leagues   leagues @relation(fields: [id_league], references: [id_league])
  teams     teams   @relation(fields: [id_team], references: [id_team])
}

model sports {
  id_sport      Int             @id @default(autoincrement())
  name          String
  description   String?
  rules         String
  num_players   Int
  sports_league sports_league[] @relation("SportsToLeague")
}

model sports_custom {
  id_sport_custom Int             @id @default(autoincrement())
  name            String
  description     String?
  rules           String
  num_players     Int
  id_league       Int
  leagues         leagues         @relation(fields: [id_league], references: [id_league])
  sports_league   sports_league[] @relation("SportsCustomToLeague")
}

model sports_league {
  id_sport_league Int            @id @default(autoincrement())
  id_league       Int
  id_sport        Int?
  id_sport_custom Int?
  leagues         leagues        @relation(fields: [id_league], references: [id_league])
  sports_custom   sports_custom? @relation("SportsCustomToLeague", fields: [id_sport_custom], references: [id_sport_custom])
  sports          sports?        @relation("SportsToLeague", fields: [id_sport], references: [id_sport])

  @@unique([id_league, id_sport])
  @@unique([id_league, id_sport_custom])
}
