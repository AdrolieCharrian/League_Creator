// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Define your database schema and models using Prisma Schema Language
// Visit https://pris.ly/d/prisma-schema to learn more about it

// images table
model images {
  id_image  Int      @id @default(autoincrement())
  format    String
  version   String
  createdAt DateTime @default(now())

  id_user   Int?
  id_league Int?
  id_team   Int?

  // Relaciones inversas
  user   users?   @relation(fields: [id_user], references: [id], name: "UserImages")
  league leagues? @relation(fields: [id_league], references: [id_league], name: "LeagueImages")
  team   teams?   @relation(fields: [id_team], references: [id_team], name: "TeamImages")

  @@index([id_user]) // Indices para optimizar búsquedas
  @@index([id_league])
  @@index([id_team])
}

// Define default images branch
model default_images {
  id_default_image Int      @id @default(autoincrement())
  format           String
  version          String
  createdAt        DateTime @default(now())
}

// Define the User model
model users {
  id             Int              @id @default(autoincrement())
  name           String?
  email          String
  username       String?
  surname        String?
  description    String?
  password       String
  accounts       Account[]
  sessions       Session[]
  league_players league_players[]
  // Relación a imágenes
  images         images[]         @relation("UserImages")

  @@unique([email])
}

//Model Account
model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

//Model Verification
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

//Model session
model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the league model
model leagues {
  id_league      Int              @id @default(autoincrement())
  name           String
  description    String?
  type           String
  maxteams       Int              @default(16)
  league_players league_players[]
  teams          teams[]
  score          score[]
  sports_custom  sports_custom[]
  sports_league  sports_league[]

  // Relación a imágenes
  images images[] @relation("LeagueImages")
}

// Define the league_players model
model league_players {
  id_participation_league Int @id @default(autoincrement())
  id_player               Int
  id_league               Int

  // Define the relationships
  users        users          @relation(fields: [id_player], references: [id])
  leagues      leagues        @relation(fields: [id_league], references: [id_league])
  players_team players_team[]
}

// Define the teams model
model teams {
  id_team     Int     @id @default(autoincrement())
  name        String
  description String?
  id_league   Int

  // Define the relationships
  leagues      leagues        @relation(fields: [id_league], references: [id_league])
  players_team players_team[]
  score        score[]

  // Relación a imágenes
  images           images[]  @relation("TeamImages")
  // Relaciones con matches
  matchesAsTeamOne matches[] @relation("TeamOneRelation")
  matchesAsTeamTwo matches[] @relation("TeamTwoRelation")
}

// Define the players_team model
model players_team {
  id_player_team Int @id @default(autoincrement())
  id_team        Int
  id_player      Int

  // Define the relationships
  teams          teams          @relation(fields: [id_team], references: [id_team])
  league_players league_players @relation(fields: [id_player], references: [id_participation_league])
}

// Matches model
model matches {
  id_match    Int      @id @default(autoincrement())
  id_team_one Int
  id_team_two Int
  match_date  DateTime
  sport       String
  winner      Int?
  loser       Int?
  draw        Boolean  @default(false)

  // Relaciones con teams
  teamOne teams @relation("TeamOneRelation", fields: [id_team_one], references: [id_team])
  teamTwo teams @relation("TeamTwoRelation", fields: [id_team_two], references: [id_team])

  // Índices para las claves foráneas
  @@index([id_team_one], name: "idx_team_one")
  @@index([id_team_two], name: "idx_team_two")
}

// Define the score model
model score {
  id_score  Int    @id @default(autoincrement())
  type      String
  id_league Int
  id_team   Int
  // both
  matches   Int?
  wins      Int?
  loses     Int?
  // League
  points    Int?
  draws     Int?
  // tournament

  // Define the relationships
  leagues leagues @relation(fields: [id_league], references: [id_league])
  teams   teams   @relation(fields: [id_team], references: [id_team])
}

// Define the Sports model
model sports {
  id_sport      Int             @id @default(autoincrement())
  name          String
  description   String?
  rules         String
  num_players   Int
  sports_league sports_league[] @relation("SportsToLeague")
}

// Define the sports_custom model
model sports_custom {
  id_sport_custom Int     @id @default(autoincrement())
  name            String
  description     String?
  rules           String
  num_players     Int
  id_league       Int

  leagues       leagues         @relation(fields: [id_league], references: [id_league])
  sports_league sports_league[] @relation("SportsCustomToLeague")
}

// Define the sports_league model
model sports_league {
  id_sport_league Int @id @default(autoincrement())
  id_league       Int

  // Uno de estos campos será usado para la relación
  id_sport        Int?
  id_sport_custom Int?

  // Relaciones
  sports        sports?        @relation("SportsToLeague", fields: [id_sport], references: [id_sport])
  sports_custom sports_custom? @relation("SportsCustomToLeague", fields: [id_sport_custom], references: [id_sport_custom])
  leagues       leagues        @relation(fields: [id_league], references: [id_league])

  // Índices únicos para evitar duplicados
  @@unique([id_league, id_sport])
  @@unique([id_league, id_sport_custom])
}
